var places = {
    '–ü–ª–æ—Ç–Ω–∏–∫–æ–≤–æ':table,
    '–†–∞–∫–∏—Ç–∏–Ω–∫–∞':table2,
    '–ì–æ–º–µ–ª—å':table4,
    '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª 1':table3.limit(1),
    '–£–Ω–∏–•–∏–º–¢–µ—Ö':geometry,
};

exports.places = places;

// === UI –î–õ–Ø –†–ò–°–û–í–ê–ù–ò–Ø –û–ë–õ–ê–°–¢–ï–ô ===
var drawingTools = Map.drawingTools();
drawingTools.setShown(true);
drawingTools.setDrawModes(['polygon', 'point', 'rectangle']);

// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
var controlPanel = ui.Panel({
    widgets: [
        ui.Label('üé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π', {fontWeight: 'bold', fontSize: '16px'}),
        ui.Label('1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è'),
        ui.Label('2. –ù–∞—Ä–∏—Å—É–π—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'),
        ui.Label('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ popup'),
        ui.Label('4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ program.js'),
    ],
    style: {position: 'top-left', width: '300px'}
});
Map.add(controlPanel);

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞
var nameInput = ui.Textbox({placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏...', style: {width: '250px'}});
var codeTextbox = ui.Textbox({
    placeholder: '–ö–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...',
    style: {width: '250px', height: '60px'}
});
var copyButton = ui.Button({
    label: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥',
    style: {backgroundColor: '#4CAF50', color: 'white'}
});
var closeButton = ui.Button({
    label: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
    style: {backgroundColor: '#f44336', color: 'white'}
});

var dialogPanel = ui.Panel({
    widgets: [
        ui.Label('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', {fontWeight: 'bold'}),
        ui.Label('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏:'),
        nameInput,
        ui.Label('–ö–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:'),
        codeTextbox,
        ui.Panel([copyButton, closeButton], ui.Panel.Layout.flow('horizontal'))
    ],
    style: {shown: false, backgroundColor: 'white', padding: '15px', border: '2px solid #4CAF50'}
});
controlPanel.add(dialogPanel);

var currentGeometry = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–æ–¥–æ–º
function showGeometryCode(geometry, name) {
    currentGeometry = geometry;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    var coordinates = geometry.coordinates();
    coordinates.evaluate(function(coords) {
        var geoType = geometry.type().getInfo();
        var code;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        if (geoType === 'Point') {
            code = "ee.Geometry.Point(" + JSON.stringify(coords) + ")";
        } else if (geoType === 'Polygon') {
            code = "ee.Geometry.Polygon(" + JSON.stringify(coords) + ")";
        } else if (geoType === 'Rectangle') {
            code = "ee.Geometry.Rectangle(" + JSON.stringify(coords) + ")";
        } else {
            code = "ee.Geometry(" + JSON.stringify(coords) + ")";
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
        codeTextbox.setValue(code);
        nameInput.setValue(name || '–ù–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å');
        dialogPanel.style().set('shown', true);
        
        print('‚úÖ –û–±–ª–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞');
        print('üìã –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', code);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
copyButton.onClick(function() {
    var name = nameInput.getValue();
    var code = codeTextbox.getValue();
    
    print('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ program.js:');
    print('// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ:');
    print("var " + name.replace(/\s+/g, '_') + " = ee.FeatureCollection([ee.Feature(" + code + ")]);");
    print('');
    print('// –í –æ–±—ä–µ–∫—Ç places –¥–æ–±–∞–≤—å—Ç–µ:');
    print("'" + name + "': " + name.replace(/\s+/g, '_') + ",");
    print('');
    print('üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç" –≤ program.js');
});

closeButton.onClick(function() {
    dialogPanel.style().set('shown', false);
    nameInput.setValue('');
    codeTextbox.setValue('');
    drawingTools.clear();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
drawingTools.onDraw(function(geometry) {
    print('‚úèÔ∏è –û–±–ª–∞—Å—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
    showGeometryCode(geometry, '–û–±–ª–∞—Å—Ç—å_' + Date.now());
});

/*
var eee = Object.keys(places);
var nDays = ee.Number(eee.length);
var dayOffsets = ee.List.sequence(0, nDays.subtract(1));
print(dayOffsets);
var n = 4;
//print(eee);
//print(places[eee[n]]);

var edd = places[eee[n]].geometry().buffer(2000).bounds();
var new_f = ee.Feature(edd).set('Buffer', 'Yes');
var new_coll =  places[eee[n]].merge(new_f);
print(new_coll);
Map.addLayer(new_coll.filterMetadata('Buffer', 'equals', 'Yes'), {color:'red'}, 'Buffer');
Map.addLayer(new_coll.limit(1), {}, 'ROI');
Map.centerObject(new_coll.filterMetadata('Buffer', 'equals', 'Yes'));*/