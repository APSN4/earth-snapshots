var imports = require('users/dreamsresults/test_uni:objects');
var places = imports.places;

print('üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç:', Object.keys(places).length);


// === UI –î–õ–Ø –†–ò–°–û–í–ê–ù–ò–Ø –û–ë–õ–ê–°–¢–ï–ô ===
var drawingTools = Map.drawingTools();
drawingTools.setShown(true);
drawingTools.setDrawModes(['polygon', 'point', 'rectangle']);

// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
var controlPanel = ui.Panel({
    widgets: [
        ui.Label('üé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π', {fontWeight: 'bold', fontSize: '16px'}),
        ui.Label('1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è'),
        ui.Label('2. –ù–∞—Ä–∏—Å—É–π—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'),
        ui.Label('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ popup'),
        ui.Label('4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ program.js'),
    ],
    style: {position: 'top-right', width: '300px'}
});
Map.add(controlPanel);

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞
var nameInput = ui.Textbox({placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏...', style: {width: '250px'}});
var codeTextbox = ui.Textbox({
    placeholder: '–ö–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...',
    style: {width: '250px', height: '60px'}
});
var copyButton = ui.Button({
    label: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥',
    style: {backgroundColor: '#4CAF50', color: 'black'}
});
var closeButton = ui.Button({
    label: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
    style: {backgroundColor: '#f44336', color: 'black'}
});

var dialogPanel = ui.Panel({
    widgets: [
        ui.Label('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', {fontWeight: 'bold'}),
        ui.Label('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏:'),
        nameInput,
        ui.Label('–ö–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:'),
        codeTextbox,
        ui.Panel([copyButton, closeButton], ui.Panel.Layout.flow('horizontal'))
    ],
    style: {shown: false, backgroundColor: 'white', padding: '15px', border: '2px solid #4CAF50'}
});
controlPanel.add(dialogPanel);

var currentGeometry = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–æ–¥–æ–º
function showGeometryCode(geometry, name) {
    currentGeometry = geometry;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    var coordinates = geometry.coordinates();
    coordinates.evaluate(function(coords) {
        var geoType = geometry.type().getInfo();
        var code;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        if (geoType === 'Point') {
            code = "ee.Geometry.Point(" + JSON.stringify(coords) + ")";
        } else if (geoType === 'Polygon') {
            code = "ee.Geometry.Polygon(" + JSON.stringify(coords) + ")";
        } else if (geoType === 'Rectangle') {
            code = "ee.Geometry.Rectangle(" + JSON.stringify(coords) + ")";
        } else {
            code = "ee.Geometry(" + JSON.stringify(coords) + ")";
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
        codeTextbox.setValue(code);
        nameInput.setValue(name || '–ù–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å');
        dialogPanel.style().set('shown', true);

        print('‚úÖ –û–±–ª–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞');
        print('üìã –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', code);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
copyButton.onClick(function() {
    var name = nameInput.getValue();
    var code = codeTextbox.getValue();

    print('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ program.js:');
    print('// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ:');
    print("var " + name.replace(/\s+/g, '_') + " = ee.FeatureCollection([ee.Feature(" + code + ")]);");
    print('');
    print('// –í –æ–±—ä–µ–∫—Ç places –¥–æ–±–∞–≤—å—Ç–µ:');
    print("'" + name + "': " + name.replace(/\s+/g, '_') + ",");
    print('');
    print('üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç" –≤ program.js');
});

closeButton.onClick(function() {
    dialogPanel.style().set('shown', false);
    nameInput.setValue('');
    codeTextbox.setValue('');
    drawingTools.clear();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
drawingTools.onDraw(function(geometry) {
    print('‚úèÔ∏è –û–±–ª–∞—Å—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
    showGeometryCode(geometry, '–û–±–ª–∞—Å—Ç—å_' + Date.now());
});



// –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
var currentPlaces = places;

// Map.setControlVisibility(false);
var panel = ui.Panel({style: {position: 'top-left'}});
Map.add(panel);
var intro = ui.Label('Panel', {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal', fontSize: '24px'});
panel.add(intro);

var select2 = ui.Select();
var button = ui.Button('–ü—Ä–∏–º–µ–Ω–∏—Ç—å');
var q = {};

//–ü–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ
var current_temperature_panel = null;
var current_actions = null;
var current_legend = null;
var current_main_panel = null;
var current_inspector = null;

var select = ui.Select({
    items: Object.keys(currentPlaces),
    onChange: function(selectedName) {
        if (!selectedName) return;

        Map.layers().reset();
        print('üéØ –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ:', selectedName);

        var uch = currentPlaces[selectedName];
        var roi = uch.geometry().buffer(2000).bounds();

        q = {uch: uch, roi: roi, imya: selectedName};

        Map.centerObject(uch);
        Map.addLayer(ee.Image().byte().paint({featureCollection: roi, width: 2}), {palette: ['red']}, '–ë—É—Ñ–µ—Ä');
        Map.addLayer(ee.Image().byte().paint({featureCollection: uch, width: 2}), {palette: ['black']}, selectedName);
    }});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
function addNewObject() {
    var namePrompt = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:', '–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ');
    if (!namePrompt) return;

    var codePrompt = prompt('–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:', 'ee.Geometry.Point([0,0])');
    if (!codePrompt) return;

    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        var geometry = eval(codePrompt);
        var featureCollection = ee.FeatureCollection([ee.Feature(geometry)]);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        currentPlaces[namePrompt] = featureCollection;

        // –û–±–Ω–æ–≤–ª—è–µ–º select
        select.items().reset(Object.keys(currentPlaces));

        print('‚úÖ –û–±—ä–µ–∫—Ç "' + namePrompt + '" –¥–æ–±–∞–≤–ª–µ–Ω!');
        print('üìç –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:', Object.keys(currentPlaces).length);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
        Map.addLayer(featureCollection, {color: 'green'}, namePrompt);
        Map.centerObject(featureCollection);

    } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:', e.message);
    }
}

button.onClick(function()
{
    Map.layers().reset();
    var DATE1 = panel_date.widgets().get(1).getValue();
    var DATE2 = panel_date.widgets().get(2).getValue();
    var cloud = Number(panel_date.widgets().get(3).getValue());
    var ROI = q.roi;
    // –î–æ–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–∞–π–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞.
    function getCloudScore(image) {
        var qa = image.select('QA_PIXEL').rename('cloud');
        var mask = qa.bitwiseAnd(1 << 3)
            .or(qa.bitwiseAnd(1 << 4))
            .or(qa.bitwiseAnd(1 << 2))
            .or(qa.bitwiseAnd(1 << 1));
        var cloudiness = mask.reduceRegion({
            reducer: 'mean',
            geometry: ROI,
            scale: 30,
        });
        return image.set(cloudiness);
    }


    //–°–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö
    var l821 = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA');
    var l921 = ee.ImageCollection('LANDSAT/LC09/C02/T1_TOA');
    var l822 = ee.ImageCollection('LANDSAT/LC08/C02/T2_TOA');
    var l922 = ee.ImageCollection('LANDSAT/LC09/C02/T2_TOA');
    var coll = l821.merge(l921).merge(l822).merge(l922)
        .filterDate(ee.Date(DATE1), ee.Date(DATE2))
        .filterBounds(q.uch)
        .map(getCloudScore).filter(ee.Filter.lt('cloud', cloud))
        //.filterMetadata('CLOUD_COVER', 'less_than', cloud)
        .sort('CLOUD_COVER', false);
    var start = ee.Date(DATE1);
    var finish = ee.Date(DATE2);

    var nDays = finish.difference(start, 'days');
    var dayOffsets = ee.List.sequence(0, nDays.subtract(1));

    var coll_LST = ee.ImageCollection(dayOffsets
        .map(function (dayOffset) {
            var dayStart = start.advance(dayOffset, 'days');
            var dayFinish = dayStart.advance(1, 'days');
            var composite = coll.filterDate(dayStart, dayFinish).median();
            return composite
                .set('empty', composite.bandNames().size().eq(0))
                .set('date', dayStart.format('YYYY-MM-dd'))
                .set('system:time_start', dayStart.millis());
        }))
        .filterMetadata('empty', 'equals', 0);


    if (coll.size().getInfo() === 0) {print(q.imya, '–°–Ω–∏–º–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞—à–ª–∏—Å—å.')}
    else {print(q.imya, '–°–Ω–∏–º–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—à–ª–∏—Å—å!', coll.toList(coll.size()))}
    var imagePAN = coll.mosaic().clip(ROI);
    var hsv = imagePAN.select(['B4', 'B3', 'B2']).rgbToHsv();
    var sharpened = ee.Image.cat([hsv.select('hue'), hsv.select('saturation'), imagePAN.select('B8')]).hsvToRgb();
    //var maxP2 = sharpened.select('red').reduceRegion({reducer:ee.Reducer.max(), geometry:ROI, scale:15, maxPixels: 1e9});
    //maxP2= ee.Number(maxP2.get('red')).getInfo();
    //print(q.imya, cloud, DATE1, DATE2, maxP2, coll.toList(coll.size()), coll_LST.toList(coll_LST.size()), coll.aggregate_array('DATE_ACQUIRED').distinct());
    //Map.addLayer(sharpened,{min: 0, max: maxP2*0.6, gamma: 1.4},'–ò—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫ '+DATE1);
    Map.addLayer(ee.Image().byte().paint({featureCollection:ROI, width:2}), {palette: ['red']}, '–ë—É—Ñ–µ—Ä');
    Map.addLayer(ee.Image().byte().paint({featureCollection:q.uch, width:2}), {palette: ['black']}, q.imya);

    q.coll = coll_LST.sort('system:time_start', true)//.aggregate_array('DATE_ACQUIRED').distinct();
        .reduceColumns(ee.Reducer.toList(), ['date'])
        .get('list');
    //print(q.coll);
    q.coll.evaluate(function(ids) {
        select2.items().reset(ids);
        select2.setValue(select2.items().get(0));
    });
});

var panel_date = ui.Panel({
    widgets: [
        ui.Label('–í–ø–∏—à–∏—Ç–µ –¥–∞—Ç—ã:'),
        ui.Textbox({placeholder:'date1', value: '2024-06-10', style:{width:'100px'}}),
        ui.Textbox({placeholder:'date2', value: '2024-07-28', style:{width:'100px'}}),
        ui.Textbox({placeholder:'cloud', value: 0.1, style:{width:'40px'}})
    ]
});


var select2 = ui.Select({
    items: q.coll,
    onChange: function(DATE) {
        Map.layers().reset();
        var name_uchastok = q.imya;
        var folder = 'GEE_exports';

        //–°–æ–∑–¥–∞—ë—Ç—Å—è –±—É—Ñ–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞, –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –æ–±—ä–µ–∫—Ç—É
        var uchastok = q.uch
        var ROI = uchastok.geometry().buffer(2000).bounds();
        Map.setOptions('hybrid', {});
        //Map.centerObject(ROI);

        //–°–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö
        var l821 = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA');
        var l921 = ee.ImageCollection('LANDSAT/LC09/C02/T1_TOA');
        var l822 = ee.ImageCollection('LANDSAT/LC08/C02/T2_TOA');
        var l922 = ee.ImageCollection('LANDSAT/LC09/C02/T2_TOA');
        var coll = l821.merge(l921).merge(l822).merge(l922)
            .filterDate(ee.Date(DATE), ee.Date(DATE).advance(1, 'days'))
            .filterBounds(ROI);
        //if (coll.size().getInfo() === 0) {print('–°–Ω–∏–º–∫–∏ –Ω–µ –Ω–∞—à–ª–∏—Å—å.')} else {print('–°–Ω–∏–º–∫–∏ –Ω–∞—à–ª–∏—Å—å!', coll.toList(coll.size()))}
        var imagePAN = coll.mosaic().clip(ROI);
        var hsv = imagePAN.select(['B4', 'B3', 'B2']).rgbToHsv();
        var sharpened = ee.Image.cat([hsv.select('hue'), hsv.select('saturation'), imagePAN.select('B8')]).hsvToRgb();
        var maxP2 = sharpened.select('red').reduceRegion({reducer:ee.Reducer.minMax(), geometry:ROI, scale:30, maxPixels: 1e9});
        maxP2= ee.Number(maxP2.get('red_max')).getInfo();
        //Map.addLayer(sharpened,{min: 0, max: maxP2*0.6, gamma: 1.4},'–ò—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫');
        print(maxP2);


        //–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        function addTemp8(image) {
            var toa = image.select('B10').multiply(0.0003342).add(0.1);
            var br_temp_kelvin = ee.Image(1321.0789).divide(ee.Image(774.8853).divide(toa).add(1).log());
            var LST8 = br_temp_kelvin.subtract(273.15).rename('Temperature');
            return image.addBands(LST8, null, true);}

        function addTemp9(image) {
            var toa = image.select('B10').multiply(0.00038).add(0.1);
            var br_temp_kelvin = ee.Image(1329.2405).divide(ee.Image(799.0284).divide(toa).add(1).log());
            var LST9 = br_temp_kelvin.subtract(273.15).rename('Temperature');
            return image.addBands(LST9, null, true);}


        var l81 = ee.ImageCollection('LANDSAT/LC08/C02/T1').map(addTemp8);
        var l91 = ee.ImageCollection('LANDSAT/LC09/C02/T1').map(addTemp9);
        var l82 = ee.ImageCollection('LANDSAT/LC08/C02/T2').map(addTemp8);
        var l92 = ee.ImageCollection('LANDSAT/LC09/C02/T2').map(addTemp9);
        var l89 = l81.merge(l91).merge(l82).merge(l92)
            .filterDate(ee.Date(DATE), ee.Date(DATE).advance(1, 'days'))
            .filterBounds(ROI);
        var image = l89.mosaic().clip(ROI);
        var LST = image.select('Temperature');

        //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        var minMax = LST.reduceRegion({reducer:ee.Reducer.minMax(), geometry:ROI, scale:30, maxPixels: 1e9});
        minMax = minMax.rename(minMax.keys(), ['max','min']);
        var min = ee.Number(minMax.get('min')).getInfo().toFixed(1);
        var max = ee.Number(minMax.get('max')).getInfo().toFixed(1);
        if (min > 0) {var min_l = '+'+min+' '+String.fromCharCode(176)+'C'}
        else {var min_l = min+' '+String.fromCharCode(176)+'C'}
        if (max > 0) {var max_l = '+'+max+' '+String.fromCharCode(176)+'C'}
        else {var max_l = max+' '+String.fromCharCode(176)+'C'}
        //print('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω—ã '+DATE, min_l+' - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', max_l+' - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è');

        //–í—ã–≤–æ–¥ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã, –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω—ã –∏ –≥—Ä–∞–Ω–∏—Ü –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç—Ä–µ—Å–∞
        var palette = ['040274', '0502ce', '307ef3', '3be285', 'b5e22e', 'ffb613', 'ff0000', '911003'];
        var visLST = {min: min, max: max, palette: palette};
        //Map.addLayer(LST, visLST, '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (LST)');
        //Map.addLayer(ee.Image().byte().paint({featureCollection:ROI, width:2}), {palette: ['red']}, '–ë—É—Ñ–µ—Ä');
        //Map.addLayer(ee.Image().byte().paint({featureCollection:uchastok, width:2}), {palette: ['black']}, name_uchastok);

        //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        var minMax_o = LST.reduceRegion({reducer:ee.Reducer.minMax(), geometry:uchastok, scale:30, maxPixels: 1e9});
        minMax_o = minMax_o.rename(minMax_o.keys(), ['max','min']);
        var min_o = ee.Number(minMax_o.get('min')).getInfo().toFixed(1);
        var max_o = ee.Number(minMax_o.get('max')).getInfo().toFixed(1);
        if (min_o > 0) {var min_l_o = '+'+min_o+' '+String.fromCharCode(176)+'C'}
        else {var min_l_o = min_o+' '+String.fromCharCode(176)+'C'}
        if (max_o > 0) {var max_l_o = '+'+max_o+' '+String.fromCharCode(176)+'C'}
        else {var max_l_o = max_o+' '+String.fromCharCode(176)+'C'}
        //print('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±—ä–µ–∫—Ç–∞ '+DATE, min_l_o+' - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', max_l_o+' - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è');

        q.export_paramsRGB = {
            image: sharpened, description: name_uchastok+'_'+DATE+'_RGB', scale: 15, region: image.geometry(),
            fileFormat: 'GeoTIFF', folder: folder,  maxPixels: 1e12 };

        q.export_paramsLST = {
            image: LST,  description: name_uchastok+'_'+DATE+'_LST',  scale: 30,
            region: image.geometry(),  fileFormat: 'GeoTIFF',  folder: folder,  maxPixels: 1e12}


        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ç–æ—á–∫–µ
        var inspector = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});
        inspector.add(ui.Label('–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ç–æ—á–∫–µ'));
        Map.add(inspector);
        Map.style().set('cursor', 'crosshair');

        Map.onClick(function(coords) {
            inspector.clear();
            inspector.style().set('shown', true);
            inspector.add(ui.Label('Loading...', {color: 'gray'}));

            var point = ee.Geometry.Point(coords.lon, coords.lat);
            var temporalMean = LST.reduce(ee.Reducer.mean());
            var sampledPoint = temporalMean.reduceRegion(ee.Reducer.mean(), point, 10);
            var computedValue = sampledPoint.get('mean');

            computedValue.evaluate(function(result) {
                inspector.clear();
                if (computedValue.getInfo() !== null)
                {inspector.add(ui.Label({value: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ: ' + result.toFixed(1)+' '+String.fromCharCode(176)+'C',  style: {stretch: 'vertical'} }));}
                else {inspector.add(ui.Label({value: '–¢–æ—á–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –±—É—Ñ–µ—Ä–Ω—É—é –∑–æ–Ω—É',  style: {stretch: 'vertical'} }));}
                inspector.add(ui.Button({label:'Close', onClick:function() {inspector.style().set('shown', false)}}));
            });
        });

        var sss1 = {fontSize: '14px', margin: '1px 5px'};
        var sss2 = {fontSize: '14px', margin: '1px 5px'};
        var sss3 = {fontSize: '16px', margin: '0px 0px'};
        var ddd1 = ui.Label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω—ã '+DATE, sss1);
        var ddd2 = ui.Label(min_l+' - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', sss2);
        var ddd3 = ui.Label(max_l+' - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è', sss2);
        var ddd7 = ui.Label('-------------------------------------------------------------------------', sss3);
        var ddd4 = ui.Label('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±—ä–µ–∫—Ç–∞ '+DATE, sss1);
        var ddd5 = ui.Label(min_l_o+' - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', sss2);
        var ddd6 = ui.Label(max_l_o+' - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è', sss2);


        var Panel_map = ui.Panel({style: {position: 'top-right'}});
        var label2 = ui.Label({value: '–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π', style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal', margin: '1px 5px'}});
        var buu1 = ui.Button('1', function() {Map.centerObject(ROI)});
        var buu2 = ui.Button('2', function() {Map.setOptions('ROADMAP', {})});
        var buu3 = ui.Button('3', function() {Map.setOptions('SATELLITE', {})});
        var buu4 = ui.Button('4', function() {Map.setOptions('hybrid', {})});

        var ddd = ui.Panel({
            widgets: [
                ui.Label('–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π', {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal', margin: '0px 1px'}),
                ui.Panel([buu1, buu2, buu3, buu4], ui.Panel.Layout.flow('horizontal')),
                ui.Label(' 1. –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω–µ', {margin: '0px 8px'}),
                ui.Label(' 2. –ì—É–≥–ª –∫–∞—Ä—Ç–∞ - —Å—Ö–µ–º–∞', {margin: '0px 8px'}),
                ui.Label(' 3. –ì—É–≥–ª –∫–∞—Ä—Ç–∞ - —Å–ø—É—Ç–Ω–∏–∫', {margin: '0px 8px'}),
                ui.Label(' 4. –ì—É–≥–ª –∫–∞—Ä—Ç–∞ - —Å–ø—É—Ç–Ω–∏–∫ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏', {margin: '0px 8px'}),
            ],
        });
        Map.add(Panel_map.add(ddd));


        var resultsPanel = ui.Panel({style: {position: 'bottom-right'}});
        Map.add(resultsPanel.add(ddd1).add(ddd2).add(ddd3).add(ddd7).add(ddd4).add(ddd5).add(ddd6));

        var mainPanel = ui.Panel({style: {position: 'top-right'}});
        var layerControlPanel = ui.Panel();
        var label = ui.Label({value: '–°–ª–æ–∏', style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal', margin: '1px 5px'}});
        layerControlPanel.add(label);

        var checkBoxLayer3 = ui.Checkbox({label: name_uchastok}).setValue(true);
        var checkBoxLayer4 = ui.Checkbox({label: '–ë—É—Ñ–µ—Ä'}).setValue(true);
        var checkBoxLayer1 = ui.Checkbox({label: '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞'}).setValue(true);
        var checkBoxLayer2 = ui.Checkbox({label: '–ò—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫'}).setValue(true);

        layerControlPanel.add(checkBoxLayer3);
        layerControlPanel.add(checkBoxLayer4);
        layerControlPanel.add(checkBoxLayer1);
        layerControlPanel.add(checkBoxLayer2);
        mainPanel.add(layerControlPanel);
        Map.add(mainPanel);

        var layer2020 = ui.Map.Layer(LST, {min: min, max: max, palette: palette}, 'LST');
        var layer2021 = ui.Map.Layer(sharpened,{min: 0, max: maxP2*0.65, gamma: 1.3},'–ò—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫');
        var layer2022 = ui.Map.Layer(ee.Image().byte().paint({featureCollection:ROI, width:2}), {palette: ['red']}, '–ë—É—Ñ–µ—Ä');
        var layer2023 = ui.Map.Layer(ee.Image().byte().paint({featureCollection:uchastok, width:2}), {palette: ['black']}, name_uchastok);

        Map.add(layer2021);
        Map.add(layer2020);
        Map.add(layer2022);
        Map.add(layer2023);

        checkBoxLayer1.onChange(function(checked){layer2020.setShown(checked)});
        checkBoxLayer2.onChange(function(checked){layer2021.setShown(checked)});
        checkBoxLayer3.onChange(function(checked){layer2023.setShown(checked)});
        checkBoxLayer4.onChange(function(checked){layer2022.setShown(checked)});

        //–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
        var title = ui.Label({
            value: '–õ–µ–≥–µ–Ω–¥–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã',
            style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal'}});

        var legend = ui.Thumbnail({
            image: ee.Image.pixelLonLat().select(0),
            params: {bbox:[0, 0, 1, 0.5], dimensions:'194x15',
                format:'png', min:0, max:1, palette:visLST.palette},
            style: {stretch: 'horizontal', margin: '0px 0px', maxHeight: '10px'},
        });

        var labels = ui.Panel({
            widgets: [
                ui.Label(min_l, {margin: '4px 5px',textAlign: 'left', stretch: 'horizontal'}),
                ui.Label(max_l, {margin: '4px 5px',textAlign: 'right', stretch: 'horizontal'})],
            layout: ui.Panel.Layout.flow('horizontal')});

        var legendPanel = ui.Panel({
            widgets: [title, legend, labels],
            style: {position: 'bottom-center', padding: '6px 15px'}});

        Map.add(legendPanel);


        if (current_temperature_panel) {
            Map.remove(current_temperature_panel);
            Map.remove(current_main_panel);
            Map.remove(current_legend);
            Map.remove(current_actions);
            Map.remove(current_inspector);
        }

        current_temperature_panel = resultsPanel;
        current_main_panel = mainPanel;
        current_legend = legendPanel;
        current_actions = Panel_map;
        current_inspector = inspector;
    }});


select.setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ...');
panel.add(select);

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
var addObjectButton = ui.Button({
    label: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç',
    onClick: function() {
        addNewObject();
    },
    style: {fontWeight: 'bold', color: 'black', backgroundColor: '#4CAF50'}
});
panel.add(addObjectButton);

print('üí° –¢–µ–∫—É—â–∏—Ö –º–µ—Å—Ç:', Object.keys(currentPlaces).length);

panel.add(panel_date);
panel.add(button);
panel.add(select2);
select2.setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É...');

var button2 = ui.Button('–≠–∫—Å–ø–æ—Ä—Ç RGB –∏ LST');
panel.add(button2);
button2.onClick(function()
{
    Export.image.toDrive(q.export_paramsRGB);
    Export.image.toDrive(q.export_paramsLST);
});